reticulate::repl_python()
install.packages("palmerpenguins")
Y
reticulate::repl_python()
N
reticulate::repl_python()
reticulate::repl_python()
install.packages("palmerpenguins")
data(package = 'palmerpenguins')
head(penguins)
head(palmerpenguins.penguins)
head(penguins_raw)
data(package = 'palmerpenguins')
head(penguins_raw)
View(penguins)
summary(penguins)
View(penguins)
View(penguins)
install.packages("tidyverse")
library(tidyverse)
browseVignettes("ggplot2")
installed.packages()
View(ToothGrowth)
View(filtered_tg)
# Apply a filter
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(filtered_tg)
# Sort the data
arrange(filtered_tg,len)
arrange(filter(ToothGrowth,dose==0.5),len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
filtered_toothgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarize(mean_len = mean(len,na.rm = T),.group='drop')
library(ggplot2)
data("diamonds")
View(diamonds)
head(diamonds)
str(diamonds)
mutate(diamonds, carat_2=carat*100)
library(tideverse)
library(tidyverse)
mutate(diamonds, carat_2=carat*100)
?print
?colnames
library(tidyverse)
names <- c("","","","")
age <-( , , , )
people <- data.frame(names, age)
age <- c(21, 27, 39, 58)
names <- c("Angelo", "Bartholomew", "Friedrich", "Roberta")
people <- data.frame(names, age)
head(people)
str(people)
glimpse(people)
?glimpse
colnames(people)
mutate(people, age_in_20 = age + 20)
# Create a tibble!
as_tibble(diamonds)
# Create a tibble!
as_tibble(diamonds)
install.packages("here")
library(here)
install.packages("skimr")
library(skimr)
library(skimr)
install.packages("janitor")
library(janitor)
library(dplyr)
# Load 'palmerpenguins'
library(palmerpenguins)
# View data
View(penguins)
# Skim
skim_without_charts(penguins)
# Glimpse
glimpse(penguins)
# Arrange the data
penguins %>% arrange(bill_length_mm)
penguins %>% arrange(-bill_length_mm)
penguins2 <- %>% arrange(-bill_length_mm)
penguins2 <- penguins %>% arrange(-bill_length_mm)
penguins %>% group_by(island) %>% drop_na() %>% summarize(mean_bill_length_mm = mean(bill_length_mm))
penguins %>% group_by(island) %>% drop_na() %>% summarize(mean_bill_length_mm = max(bill_length_mm))
penguins %>%
group_by(species, island) %>%
drop_na() %>%
summarize(max_bl = max(bill_length_mm),
mean_bl= mean(bill_length_mm))
# What if we only want data on Adelie penguins?
penguins %>% filter(species == "Adelie")
## Step 1: Load packages
library(tidyverse)
library(skimr)
library(janitor)
bookings_df <- read_csv("hotel_bookings_V1.0_20230112.csv")
setwd(C:\Users\andre\OneDrive\Documents\GitHub\Andrex_Ibiza\R Scripts)
bookings_df <- read_csv("hotel_bookings_V1.0_20230112.csv")
setwd(\Users\andre\OneDrive\Documents\GitHub\Andrex_Ibiza\R Scripts)
setwd(Users\andre\OneDrive\Documents\GitHub\Andrex_Ibiza\R Scripts)
setwd(C:/Users/andre/OneDrive/Documents/GitHub/Andrex_Ibiza/R Scripts)
setwd("C:/Users/andre/OneDrive/Documents/GitHub/Andrex_Ibiza/R Scripts")
bookings_df <- read_csv("hotel_bookings_V1.0_20230112.csv")
head(bookings_df)
str(bookings_df)
glimpse(bookings_df)
col_names(bookings_df)
colnames(bookings_df)
skim_without_charts(bookings_df)
trimmed_df <- bookings_df %>%
select(hotel, is_canceled, lead_time)
trimmed_df %>%
select(hotel, is_canceled, lead_time) %>%
rename(hotel_type = hotel)
example_df <- bookings_df %>%
select(arrival_date_year, arrival_date_month) %>%
unite(arrival_month_year,
c("arrival_date_month", "arrival_date_year"),
sep = " ")
example_df <- bookings_df %>%
mutate(guests = total_people)
example_df <- bookings_df %>%
mutate(guests = total_guests)
rlang::last_error()
example_df <- bookings_df %>%
mutate(guests = adults + children + babies)
head(example_df)
example_df <- bookings_df %>%
summarize(number_canceled = sum(is_cancelled),
average_lead_time = mean(lead_time))
example_df <- bookings_df %>%
summarize(number_canceled = sum(is_cancelled),
average_lead_time = mean(lead_time))
head(bookings_df)
colnames(example_df)
example_df <- bookings_df %>%
summarize(number_canceled = sum(is_cancelled),
average_lead_time = mean(lead_time))
example_df <- bookings_df %>%
summarize(number_canceled = sum(is_canceled),
average_lead_time = mean(lead_time))
head(example_df)
example_df```
example_df
id <- c(1:10)
name <- c("John Mendes", "Rob Stewart", "Rachel Abrahamson", "Christy Hickman",
"Johnson Harper", "Candace Miller", "Carlson Landy", "Pansy Jordan",
"Darius Berry", "Claudia Garcia")
job_title <- c("Professional", "Programmer", "Management", "Clerical",
"Developer", "Programmer", "Management", "Clerical",
"Developer", "Programmer")
employee <- data.frame(id, name, job_title)
print(employee)
separate(employee, name,into=c('first_name','last_name'), sep=' ')
unite(employee, 'name',first_name, last_name, sep=' ')
# Use mutate to add a column for kg:
penguins %>%
mutate(body_mass_kg=body_mass_g/1000)
# Use mutate to add a column for kg:
penguins %>%
mutate(body_mass_kg=body_mass_g/1000,
flipper_length_m=flipper_length_mm/1000)
# Create plot
ggplot(data=penguins, aes(x=flipper_length_mm, y=body_mass_g))+geom_point(aes(color=species))
citation("palmerpenguins")
?clean_names
install.packages('Tmisc')
library(Tmisc)
View(quartet)
quartet %>%
group_by(set) %>%
summarize(mean(x),sd(x),mean(y),sd(y),cor(x,y))
ggplot(quartet,aes(x,y)) + geom_point() + geom_smooth(method=lm,se=FALSE) + facet_wrap(-set)
ggplot(quartet,aes(x,y)) + geom_point() + geom_smooth(method=lm,se=FALSE) + facet_wrap(~set)
install.packages("datasauRus")
library(datasauRus)
ggplot(datasaurus_dozen, aes(x=x,y=y,color=dataset))+geom_point+theme_void()+theme(legend.position = "none")
ggplot(datasaurus_dozen, aes(x=x,y=y,color=dataset))+geom_point()+theme_void()+theme(legend.position = "none")
install.packages("SimDesign")
library(SimDesign)
?SimFunctions
?SimDesign
actual_temp <- c(68.3, 70, 72.4, 71, 67, 70)
predicted_temp<-c(67.9, 69, 71.5, 70, 67, 69)
bias(actual_temp, predicted_temp)
actual_sales<-c(150,203,137,247,116,287)
predicted_sales<-c(200,300,150,250,150,3)
bias(actual_sales,predicted_sales)
bias(actual_temp, predicted_temp)+
actual_sales<-c(150,203,137,247,116,287)
predicted_sales<-c(200,300,150,250,150,300)
bias(actual_sales,predicted_sales)
?wd
?getwd
getwd()
library(tidyverse)
library(skimr)
library(janitor)
hotel_bookings <- read_csv("hotel_bookings_V2.0_20230113.csv")
skim_without_charts(hotel_bookings)
glimpse(hotel_bookings)
## Step 4: Manipulating your data
arrange(hotel_bookings, -lead_time)
hotel_bookings_v2 <- arrange(
hotel_bookings, -lead_time)  # Sort DESC
# by lead_time
View(hotel_bookings)
View(hotel_bookings_v2)
# You can find the max and min lead_time without
# using the arrange function.
max(hotel_bookings$lead_time)
min(hotel_bookings$lead_time)
mean(hotel_bookings$lead_time)
summarize(hotel_bookings$lead_time)
summarise(hotel_bookings$lead_time)
median(hotel_bookings$lead_time)
# Filter for City Hotels only
hotel_bookings_city <-(hotel_bookings, hotel_bookings$hotel=="City Hotel")
# Filter for City Hotels only
hotel_bookings_city <-(hotel_bookings$hotel=="City Hotel")
head(hotel_bookings_city)
# Filter for City Hotels only
hotel_bookings_city <- filter(hotel_bookings, hotel_bookings$hotel=="City Hotel")
View(hotel_bookings_city)
skim_without_charts(hotel_bookings_city)
mean(hotel_bookings_city$lead_time)
# R group and summarize
hotel_summary <-
hotel_bookings %>%
group_by(hotel) %>%
summarise(average_lead_time = mean(lead_time),
min_lead_time=min(lead_time),
max_lead_time=max(lead_time))
head(hotel_summary)
str(hotel_bookings_city)
?unite
?bias
library(ggplot2)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel, fill = market_segment))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = hotel)) +
facet_wrap(~)
ggplot(data = hotel_bookings) + geom_bar(mapping = aes(x = hotel)) + facet_wrap(~)
ggplot(data = hotel_bookings) + geom_bar(mapping = aes(x = hotel)) + facet_wrap(~))
ggplot(data = hotel_bookings) + geom_bar(mapping = aes(x = hotel)) + facet_wrap(~)
ggplot(data = hotel_bookings) + geom_bar(mapping = aes(x = hotel)) + facet_wrap(~market_segment)
onlineta_city_hotels_v2 <- hotel_bookings %>%
filter(hotel=="City Hotel") %>%
filter(market_segment=="Online TA")
View(onlineta_city_hotels_v2)
ggplot(data = onlineta_city_hotels_v2) +
geom_point(mapping = aes(x = lead_time, y = children))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
labs(title="Hotel Bookings by Market Segment")
mindate <- min(hotel_bookings$arrival_date_year)
maxdate <- max(hotel_bookings$arrival_date_year)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
subtitle=paste0("Data from: ", mindate, " to ", maxdate))
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate))
# Clean Up X and Y Labels
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = market_segment)) +
facet_wrap(~hotel) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title="Comparison of market segments by hotel type for hotel bookings",
caption=paste0("Data from: ", mindate, " to ", maxdate),
x="Market Segment",
y="Number of Bookings")
ggsave('hotel_booking_chart_V1.0_20230113.png')
?labs
