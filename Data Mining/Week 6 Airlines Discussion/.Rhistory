?strptime
install.packages(naniar)
install.packages("naniar")
install.packages("naniar")
# Load packages
library(palmerpenguins) # data source
library(tidyverse)
library(dplyr)
library(naniar)
install.packages('naniar')
library(naniar)
install.packages("naniar")
install.packages('Rtools')
install.packages('naniar')
install.packages("naniar")
install.packages(c("BH", "bslib", "cli", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "future", "future.apply", "ggplot2", "glue", "haven", "htmltools", "htmlwidgets", "jsonlite", "knitr", "later", "lifecycle", "lubridate", "markdown", "openssl", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "reprex", "rlang", "sass", "scales", "stringi", "stringr", "systemfonts", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "xts", "yaml"))
install.packages(c("BH", "bslib", "cli", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "future", "future.apply", "ggplot2", "glue", "haven", "htmltools", "htmlwidgets", "jsonlite", "knitr", "later", "lifecycle", "lubridate", "markdown", "openssl", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "reprex", "rlang", "sass", "scales", "stringi", "stringr", "systemfonts", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "xts", "yaml"))
install.packages(c("BH", "bslib", "cli", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "future", "future.apply", "ggplot2", "glue", "haven", "htmltools", "htmlwidgets", "jsonlite", "knitr", "later", "lifecycle", "lubridate", "markdown", "openssl", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "reprex", "rlang", "sass", "scales", "stringi", "stringr", "systemfonts", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "xts", "yaml"))
install.packages(c("BH", "bslib", "cli", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "future", "future.apply", "ggplot2", "glue", "haven", "htmltools", "htmlwidgets", "jsonlite", "knitr", "later", "lifecycle", "lubridate", "markdown", "openssl", "plotly", "prettyunits", "processx", "progress", "ps", "ragg", "Rcpp", "RcppArmadillo", "readr", "recipes", "reprex", "rlang", "sass", "scales", "stringi", "stringr", "systemfonts", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "xts", "yaml"))
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
library(utils, lib.loc = "C:/Program Files/R/R-4.3.1/library")
detach("package:methods", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:datasets", unload = TRUE)
install.packages("naniar")
dbinom(5, 10, 0.5)
dbinom(6, 10, 0.5)
dbinom(10, 10, 0.5)
p_value <- 1 - pnorm(2.15, mean = 127, sd = 39, lower.tail = FALSE)
p_value
# Define the t-value and degrees of freedom
t_value <- 3
df <- 2
# Find the cumulative probability up to the positive t-value
p_right_tail <- 1 - pt(t_value, df)
# Since the distribution is symmetric, the left tail area is the same as the right tail area
# Double the one tail area to get the total area outside plus/minus 3 units from the mean
total_tail_area <- 2 * p_right_tail
# Print the result
total_tail_area
t_value <- -1.79
df <- 19
p_right_tail <- 1-pt(t_value, df)
p_right_tail
0.069/sqrt(15)
2 * pt(1.47,99)
p_value <- 2 * (1 - pt(abs(1.47), 99))
p_value
# Values given in the problem
x_diff <- 12.76
SE_xdiff <- 1.67
df <- 72
# Calculating the t-score (already given in the problem as 7.65, but included here for completeness)
t_score <- (x_diff - 0) / SE_xdiff
# Calculating the p-value for a two-tailed test
p_value <- 2 * (1 - pt(abs(t_score), df))
# Output the t-score and p-value
print(paste("T-score:", t_score))
print(paste("P-value:", p_value))
install.packages("openintro")
install.packages("openintro")
install.packages("gss")
library(gss)
data(gss_all)
library(gss)
data(gss)
setwd("//wdmycloudex4100/Axel-Ibiza/Andrex_Ibiza/Data Mining/Week 6 Airlines Discussion")
# Install and load packages
install.packages("palmerpenguins")
install.packages("naniar")
install.packages("gt")
install.packages("BSDA")
library(palmerpenguins) #data source
library(tidyverse) #dplyr, ggplot2, tidyr
library(naniar) #working with missing data
library(gt) #for nice tables
library(BSDA)
# Set df
df <- penguins_raw
# Print the first 10 rows of the data set
head(df, 10)
# Print the last 10 rows of the data set
tail(df, 10)
# Find the dimensions of the data set
dim(df)
# Determine the names of the variables in the data set
colnames(df)
# Determine the structure of the variables in the data set
str(df)
# Reformat all column names
colnames(df)[1] <- "study_name"
colnames(df)[2] <- "sample_number"
colnames(df)[3] <- "species"
colnames(df)[4] <- "region"
colnames(df)[5] <- "island"
colnames(df)[6] <- "stage"
colnames(df)[7] <- "individual_id"
colnames(df)[8] <- "clutch_completion"
colnames(df)[9] <- "date_egg"
colnames(df)[10] <- "culmen_length_mm"
colnames(df)[11] <- "culmen_depth_mm"
colnames(df)[12] <- "flipper_length_mm"
colnames(df)[13] <- "weight"
colnames(df)[14] <- "sex"
colnames(df)[15] <- "delta_15_n"
colnames(df)[16] <- "delta_13_c"
colnames(df)[17] <- "comments"
# Recheck column names
colnames(df) # column re-naming successful!
# Load packages
library(palmerpenguins) # data source
library(dplyr)
library(tidyverse)
library(naniar) # working with missing data
library(tidyr) # manipulating character strings
# Determine column names
colnames(df)
# Check for missing data values
vis_miss(df)
# Check for missing data
miss_var_summary(df)
## There is missing data in:
## "comments" (84.3% miss.),
## "delta_15_n" (4.07%),
## "delta_13_c" (3.78%),
##"sex" (3.20%),
##"culmen_length_mm" (0.581%),
## "culmen_depth_mm" (0.581%),
## flipper_length_mm" (0.581%),
## "weight" (0.581%)
str(df)
# View columns listed above to ensure missing data is listed as NA
df$comments # all are NA
df$delta_15_n # all are NA
df$delta_13_c # all are NA
df$sex # all are NA
df$culmen_length_mm # all are NA
df$culmen_depth_mm # all are NA
df$flipper_length_mm # all are NA
df$weight # all are NA
# Check that the sum of the number of good data values and the number of missing
# data values is equal to the total number of data values for the columns
sum(is.na(df$comments)) + sum(!is.na(df$comments)) - nrow(df) # 0
sum(is.na(df$delta_15_n)) + sum(!is.na(df$delta_15_n)) - nrow(df) # 0
sum(is.na(df$delta_13_c)) + sum(!is.na(df$delta_13_c)) - nrow(df) # 0
sum(is.na(df$sex)) + sum(!is.na(df$sex)) - nrow(df) # 0
sum(is.na(df$culmen_length_mm)) + sum(!is.na(df$culmen_length_mm)) - nrow(df) # 0
sum(is.na(df$culmen_depth_mm)) + sum(!is.na(df$culmen_depth_mm)) - nrow(df) # 0
sum(is.na(df$flipper_length_mm)) + sum(!is.na(df$flipper_length_mm)) - nrow(df) # 0
sum(is.na(df$weight)) + sum(!is.na(df$weight)) - nrow(df) # 0
# Convert sample_number to an integer
df$sample_number <- as.integer(df$sample_number)
class(df$sample_number)
# Convert species, region, island, stage, clutch_completion, and sex to factors
df$species <- as.factor(df$species)
class(df$species)
df$region <- as.factor(df$region)
class(df$region)
df$island <- as.factor(df$island)
class(df$island)
df$stage <- as.factor(df$stage)
class(df$stage)
df$clutch_completion <- as.factor(df$clutch_completion)
class(df$clutch_completion)
df$sex <- as.factor(df$sex)
class(df$sex)
# Recheck the structure of the variables in the data set
str(df)
# Rename species levels for simplicity
levels(df$species) <- c("Adelie", "Chinstrap", "Gentoo")
# Inspect factor levels for preparation of summary report
levels(df$species)
levels(df$region)
levels(df$island)
levels(df$stage)
levels(df$clutch_completion)
levels(df$sex)
# Scatter plot culmen_length_mm x culmen_depth_mm color by species
posn_j <- position_jitter(0.1,
seed = 666)
ggplot(df,
aes(x = culmen_length_mm,
y = culmen_depth_mm,
color = species)) +
geom_point(position = posn_j, alpha = 0.7, size = 5) +
labs(title="Culmen Length (mm) vs. Culmen Length (mm) by Species",
x = "Culmen Length (mm)",
y = "Culmen Depth (mm)") +
scale_color_discrete("Species") +
theme_classic()
# Boxplot of weight by species
ggplot(df,
aes(x=species,
y=weight,
fill=species)) +
geom_boxplot() +
labs(title = "Weight by Species",
x = "Species",
y = "Weight") +
theme_classic()
# Stacked density plots of weight colored by species
ggplot(df, aes(x=weight, fill=species)) +
geom_density(alpha = 0.5) +
labs(title = "Stacked Density Plots of Weight by Species", x = "Body Mass (g)", y = "Density") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
# Stacked density plots of culmen_length_mm colored by species
ggplot(df, aes(x=culmen_length_mm, fill=species)) +
geom_density(alpha = 0.5) +
labs(title = "Stacked Density Plots of Culmen Length (mm) by Species", x = "Culmen Length (mm)", y = "Density") +
theme_classic() +
scale_y_continuous(labels = scales::comma)
# Stacked density plots of culmen_depth_mm colored by species
ggplot(df, aes(x=culmen_depth_mm, fill=species)) +
geom_density(alpha = 0.5) +
labs(title = "Stacked Density Plots of Culmen Depth (mm) by Species", x = "Culmen Depth (mm)", y = "Density") +
theme_classic() +
scale_y_continuous(labels = scales::comma)
# Stacked bar plot for species by island
ggplot(df, aes(x = island, fill = species)) +
geom_bar(position = "stack") +
labs(title = "Segmented Bar Plot of Species by Island", x = "Island", y = "Count") +
theme_classic()
# Subsetting penguins_clean by only columns with numerical data
penguins_numeric <- df[sapply(df, is.numeric)]
str(penguins_numeric)
# Reshape the data
penguins_long <- penguins_numeric %>%
pivot_longer(cols = -sample_number, names_to = "variable", values_to = "value")
# Create faceted histograms for each variable in penguins_numeric
ggplot(penguins_long, aes(x = value)) +
geom_histogram(bins = 30, fill = 'red', color = 'black') +
facet_wrap(~ variable, scales = 'free_x') +
theme_minimal() +
labs(title = 'Faceted Histograms for Each Numeric Variable in Penguins Dataset',
x = 'Value',
y = 'Frequency')
library(ggplot2)
library(dplyr)
library(gt)
weights_freq_distribution <- data.frame(table(df$weight))
weights <- as.numeric(as.character(weights_freq_distribution$Var1))
probabilities <- round(weights_freq_distribution$Freq/sum(weights_freq_distribution$Freq), 4)
sum(probabilities) #should sum to 1
# Construct a discrete probability distribution of weights
weights_discrete_prob_distribution <- data.frame(weights, probabilities)
# Nice print out of discrete probability distribution
weights_discrete_prob_distribution %>% gt()
# Graph of discrete probability distribution
ggplot(weights_discrete_prob_distribution, aes(x=weights, y=probabilities)) +
geom_col(fill = "steelblue", color = "black") + # Use geom_col() for bar plots of pre-summarized data
labs(title = "Discrete Probability Distribution of Penguin Weights",
x = "Weight (g)",
y = "Probability") +
theme_minimal() + # Cleaner theme
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
####Binomial Probability Distribution  for Species
#Find the probability a penguin is species Adelie (one trial)
p <- sum(df$species == "Adelie")/ length(df$species)
#Find the probability a penguin is not species Adelie (one trial)
q <- sum(df$species != "Adelie")/ length(df$species)
#Check that  p + q = 1
p + q
#Find binomial probabilities that if n penguins are selected at random,
# exactly x of them will be Adelie species
x <- 0:10
n <- 10
binomial_probabilities <- round(dbinom(x,n,p),4)
#Construct binomial probability distribution
species_binomial_prob_distribution <- data.frame(x, binomial_probabilities)
#Nice print our of binomial probability distribution
species_binomial_prob_distribution %>% gt()
breaks <- c(0:n)
ggplot(species_binomial_prob_distribution, aes(x, y=binomial_probabilities, fill="red")) + geom_bar(stat = "identity") + scale_x_continuous(breaks = breaks) + ggtitle("Binomial Probability Distribution for Species Adelie")
#Normal Approximation to Binomial Distribution for Species
# Find the probability a penguin is species Adelie (one trial)
p <- sum(df$species == "Adelie") / length(df$species)
# Find the probability a penguin is not species Adelie (one trial)
q <- sum(df$species != "Adelie") / length(df$species)
# Check that p + q = 1
p + q
# Find binomial probabilities that if n penguins are selected at random,
# exactly x of them will be Adelie, where np >= 10 and nq >= 10.
n <- 30
x <- 0:n
np <- n * p
nq <- n * q
cat('np =', np, '>= 10')
cat('nq =', nq, '>= 10')
binomial_probabilities <- round(dbinom(x, n, p), 4)
# Construct binomial probability distribution
species_binomial_prob_distribution <- data.frame(x, binomial_probabilities)
# Superimpose a normal distribution
mean_binom <- n * p
sd_binom <- sqrt(n * p * q)
ggplot(species_binomial_prob_distribution, aes(x, y = binomial_probabilities)) +
geom_bar(stat = "identity", fill = "blue") +  # Make it blue
stat_function(fun = dnorm, args = list(mean = mean_binom, sd = sd_binom), color = "red") +
scale_x_continuous(breaks = 0:n) +
ggtitle("Binomial Probability Distribution for Species Adelie with Normal Approximation")
