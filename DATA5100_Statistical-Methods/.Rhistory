# Load packages
library(tidyverse)
df <- readRDS("penguins_clean_w3.rds")
setwd("//wdmycloudex4100/Axel-Ibiza/Andrex_Ibiza/DATA5100_Statistical-Methods")
setwd("//wdmycloudex4100/Axel-Ibiza/Andrex_Ibiza/DATA5100_Statistical-Methods/Final Project - PalmerPenguins")
library(tidyverse)
df <- readRDS("penguins_clean_w3.rds")
?type
?is.numeric
numeric_variables <- df %>%
filter(is.numeric())
numeric_variables <- df %>%
filter(is.numeric(df))
str(numeric_variables)
penguins_numeric <- penguins_clean[sapply(penguins_clean, is.numeric)]
penguins_numeric <- df[sapply(penguins_clean, is.numeric)]
library(tidyverse)
df <- readRDS("penguins_clean_w3.rds")
# Step 1: Which numerical variables have an approximately symmetric distribution?
# Subsetting penguins_clean by only columns with numerical data
penguins_numeric <- df[sapply(df, is.numeric)]
str(penguins_numeric)
View(penguins_numeric)
# Week 4 palmerpenguins project checkpoint
packages.install(reshape2)
?install
??install
install.packages(reshape2)
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
# Reshape the data
penguins_long <- penguins_numeric %>%
pivot_longer(cols = -sample_number, names_to = "variable", values_to = "value")
# Create faceted histograms for each variable in penguins_numeric
ggplot(penguins_long, aes(x = value)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
facet_wrap(~ variable, scales = 'free_x') +
theme_minimal() +
labs(title = 'Faceted Histograms for Each Numeric Variable in Penguins Dataset',
x = 'Value',
y = 'Frequency')
z_scores <- as.data.frame(scale(penguins_numeric[,-1])) # Exclude sample_number
names(z_scores) <- names(penguins_numeric[,-1]) # Assign correct column names
# Check for outliers (z-score > 3 or z-score < -3)
outliers <- apply(z_scores, 2, function(x) sum(x > 3 | x < -3))
# Output the number of outliers for each variable
outliers
coefficient_of_variation <- function(x) {
(sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)) * 100
}
# Select variables to compare
selected_variables <- c('culmen_length_mm', 'flipper_length_mm', 'body_mass_g')
# Calculate CV for each selected variable
cv_values <- sapply(penguins_numeric[selected_variables], coefficient_of_variation)
# Output the CV values
cv_values
apply_chebyshev <- function(data, k) {
# Exclude the "sample_number" column
data <- data[, !colnames(data) %in% "sample_number"]
# Calculate mean and standard deviation for each numeric column
stats <- sapply(data, function(column) {
c(mean = mean(column, na.rm = TRUE), sd = sd(column, na.rm = TRUE))
})
# Apply Chebyshev's Rule to calculate the minimum proportion within
# k standard deviations
chebyshev_min_proportion <- 1 - 1 / (k^2)
# Calculate the range within k standard deviations
ranges <- t(stats) * c(1, k) + cbind(stats['mean',], -stats['sd',])
# Count the number of values within the range
within_range <- sapply(data, function(column, range) {
sum(column >= range[1] & column <= range[2], na.rm = TRUE)
}, range = ranges)
# Calculate the proportion of values within the range
proportions <- within_range / sapply(data, function(column) sum(!is.na(column)))
# Return a list with the calculated values
list(
k = k,
chebyshev_min_proportion = chebyshev_min_proportion,
ranges = ranges,
proportions = proportions
)
}
# Exclude the "sample_number" column from penguins_numeric
penguins_numeric <- penguins_numeric[, !colnames(penguins_numeric) %in% "sample_number"]
# Calculate mean and standard deviation for each numeric column
chebyshev <- sapply(penguins_numeric, function(column) {
c(mean = mean(column, na.rm = TRUE), sd = sd(column, na.rm = TRUE))
})
# Print the results
chebyshev
mean_culmen_length <- mean(penguins_numeric$culmen_length_mm, na.rm = TRUE)
sd_culmen_length <- sd(penguins_numeric$culmen_length_mm, na.rm = TRUE)
# Define k for Chebyshev's inequality (e.g., k = 2 for 75%)
k <- 2
# Calculate the range using Chebyshev's inequality
minus_k_sd <- round(mean_culmen_length - k*sd_culmen_length, 1)
plus_k_sd <- round(mean_culmen_length + k*sd_culmen_length, 1)
percent <- (1 - 1/k^2)*100
cat("By Chebyshev's Rule, at least", percent, "% of the penguins' culmen lengths are between", minus_k_sd, "and", plus_k_sd, ".")
penguins_numeric <- df[sapply(df, is.numeric)]
str(penguins_numeric)
z_scores <- as.data.frame(scale(penguins_numeric[,-1])) # Exclude sample_number
names(z_scores) <- names(penguins_numeric[,-1]) # Assign correct column names
# Check for outliers (z-score > 3 or z-score < -3)
outliers <- apply(z_scores, 2, function(x) sum(x > 3 | x < -3))
# Output the number of outliers for each variable
outliers
df$z_flipper_length_mm <- (df$flipper_length_mm - mean(df$flipper_length_mm))/sd(df$flipper_length_mm)
zdf_flipper_length_mm <- df %>% filter(z_flipper_length_mm > 3 | z_flipper_length_mm < -3)
outliers_flipper_length_mm <- zdf_flipper_length_mm$flipper_length_mm
outliers_flipper_length_mm
df$z_culmen_depth_mm <- (df$culmen_depth_mm - mean(df$culmen_depth_mm)) / sd(df$culmen_depth_mm)
# Filter the dataframe for 'culmen_depth_mm' z-scores greater than 3 or less than -3
zdf_culmen_depth_mm <- df %>% filter(z_culmen_depth_mm > 3 | z_culmen_depth_mm < -3)
# Extract 'culmen_depth_mm' values for potential outliers
outliers_culmen_depth_mm <- zdf_culmen_depth_mm$culmen_depth_mm
outliers_culmen_depth_mm
df$z_body_mass_g <- (df$body_mass_g - mean(df$body_mass_g)) / sd(df$body_mass_g)
zdf_body_mass_g <- df %>% filter(z_body_mass_g > 3 | z_body_mass_g < -3)
outliers_body_mass_g <- zdf_body_mass_g$body_mass_g
outliers_body_mass_g
dpois(70, lambda = 75)
library(tidyverse)
library(dplyr)
library(gt) #for nice tables
install.packages("gt")
install.packages("Rtools")
library(tidyverse)
library(dplyr)
# library(gt) #for nice tables
#Read in Week 5 dataset
df <- readRDS("penguins_clean_w5.rds")
setwd("//wdmycloudex4100/Axel-Ibiza/Andrex_Ibiza/DATA5100_Statistical-Methods/Final Project - PalmerPenguins")
library(tidyverse)
library(dplyr)
# library(gt) #for nice tables
#Read in Week 5 dataset
df <- readRDS("penguins_clean_w5.rds")
str(df)
weights_freq_distribution <- data.frame(table(df$body_mass_g))
weights <- as.numeric(as.character(weights_freq_distribution$Var1))
probabilities <- round(weights_freq_distribution$Freq/sum(weights_freq_distribution$Freq),4)
sum(probabilities)
install.packages("Rtools", dependencies = TRUE)
ggplot(weights_discrete_prob_distribution, aes(x=weights, y=probabilities)) +
geom_col(fill = "steelblue", color = "black") + # Use geom_col() for bar plots of pre-summarized data
labs(title = "Discrete Probability Distribution of Penguin Weights",
x = "Weight (body_mass_g)",
y = "Probability") +
theme_minimal() + # Cleaner theme
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
# Find the probability of each weight (body_mass_g)
weights_freq_distribution <- data.frame(table(df$body_mass_g))
weights <- as.numeric(as.character(weights_freq_distribution$Var1))
probabilities <- round(weights_freq_distribution$Freq/sum(weights_freq_distribution$Freq),4)
sum(probabilities) #should sum to 1
# Construct a discrete probability distribution of heights
weights_discrete_prob_distribution <- data.frame(weights,probabilities)
# Nice print out of discrete probability distribution
# weights_discrete_prob_distribution %>% gt()
# Graph of discrete probability distribution
ggplot(weights_discrete_prob_distribution, aes(x=weights, y=probabilities)) +
geom_col(fill = "steelblue", color = "black") + # Use geom_col() for bar plots of pre-summarized data
labs(title = "Discrete Probability Distribution of Penguin Weights",
x = "Weight (body_mass_g)",
y = "Probability") +
theme_minimal() + # Cleaner theme
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
p <- sum(df$species == "Adelie")/ length(df$species)
#Find the probability a penguin is not species Adelie (one trial)
q <- sum(df$species != "Adelie")/ length(df$species)
#Check that  p + q = 1
p + q
#Find the probability a penguin is species Adelie (one trial)
p <- sum(df$species == "Adelie")/ length(df$species)
#Find the probability a penguin is not species Adelie (one trial)
q <- sum(df$species != "Adelie")/ length(df$species)
#Check that  p + q = 1
p + q
#Find binomial probabilities that if n penguins are selected at random,
# exactly x of them will be Adelie species
x <- 0:10
n <- 10
binomial_probabilities <- round(dbinom(x,n,p),4)
#Construct binomial probability distribution
species_binomial_prob_distribution <- data.frame(x, binomial_probabilities)
#Nice print our of binomial probability distribution
species_binomial_prob_distribution %>% gt()
mean(df$body_mass_g)
mean(df$body_mass_g, na.rm=TRUE)
ggplot(df, aes(x = "body_mass_g")) + geom_histogram(bins = 30)
ggplot(df, aes(x = body_mass_g)) + geom_histogram(bins = 30)
ggplot(df, aes(x = body_mass_g, y = ..density..)) +
geom_histogram(bins = 30, aes(y = ..density..)) +
ylab("Density")
ggplot(df, aes(x = body_mass_g)) + geom_histogram(bins = 30)
ggplot(df, aes(x = body_mass_g)) +
geom_density(fill = "blue", alpha = 0.5) +
xlab("Body Mass (g)") +
ylab("Density")
library(scales)
ggplot(df, aes(x = body_mass_g)) +
geom_density(fill = "blue", alpha = 0.5) +
scale_y_continuous(labels = scales::comma) +
xlab("Body Mass (g)") +
ylab("Density")
ggplot(df, aes(x = body_mass_g)) +
geom_density(fill = "blue", alpha = 0.5) +
scale_y_continuous(labels = scales::comma) +
xlab("Body Mass (g)") +
ylab("Density") +
title("Density Plot of Penguin Body Weight in Grams")
ggplot(df, aes(x = body_mass_g)) +
geom_density(fill = "blue", alpha = 0.5) +
scale_y_continuous(labels = scales::comma) +
xlab("Body Mass (g)") +
ylab("Density") +
ggtitle("Density Plot of Penguin Body Weight in Grams")
#Find the probability a penguin is species Adelie (one trial)
p <- sum(df$species == "Adelie")/ length(df$species)
#Find the probability a penguin is not species Adelie (one trial)
q <- sum(df$species != "Adelie")/ length(df$species)
#Check that  p + q = 1
p + q
#Find binomial probabilities that if n penguins are selected at random,
# exactly x of them will be Adelie species
x <- 1:10
n <- 10
binomial_probabilities <- round(dbinom(x,n,p),4)
#Construct binomial probability distribution
species_binomial_prob_distribution <- data.frame(x, binomial_probabilities)
#Nice print our of binomial probability distribution
species_binomial_prob_distribution %>% gt()
#Find the probability a penguin is species Adelie (one trial)
p <- sum(df$species == "Adelie")/ length(df$species)
#Find the probability a penguin is not species Adelie (one trial)
q <- sum(df$species != "Adelie")/ length(df$species)
#Check that  p + q = 1
p + q
#Find binomial probabilities that if n penguins are selected at random,
# exactly x of them will be Adelie species
x <- 1:10
n <- 10
binomial_probabilities <- round(dbinom(x,n,p),4)
#Construct binomial probability distribution
species_binomial_prob_distribution <- data.frame(x, binomial_probabilities)
#Nice print our of binomial probability distribution
# species_binomial_prob_distribution %>% gt()
breaks <- c(0:n)
ggplot(species_binomial_prob_distribution, aes(x, y=binomial_probabilities)) + geom_bar(stat = "identity") + scale_x_continuous(breaks = breaks)
